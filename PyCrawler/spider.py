from urllib.request import urlopenimport finder as finderfrom link_Finder import LinkFinderfrom general import *class Spider:    # Class variables (shared among all instances)    project_name: 'bookSpider'    home_url: 'https//freecomputerbooks.com/'    domain_name: 'freecomputerbooks.com'    queue_file: 'bookSpider/queue.txt'    crawled_file: 'bookSpider/crawled.txt'    queue: set()    crawled: set()    def __init__(self, project_name, home_url, domain_name):        Spider.project_name = project_name        Spider.home_url = home_url        Spider.domain_name = domain_name        Spider.queue_file  = Spider.project_name + '/queue.txt'        Spider.crawled_file = Spider.project_name + '/crawled.txt'        self.boot(self)        self.crawl_page('First Spider', Spider.home_url)    @staticmethod    def boot(self):        create_project_dir(Spider.project_name)        create_data_files(Spider.project_name, Spider.home_url)        Spider.queue = file_to_set(Spider.queue_file)        Spider.crawled = file_to_set(Spider.crawled_file)    @staticmethod    def crawl_page(thread_name, page_url):        if page_url not in Spider.crawled:            print(thread_name + 'now crawling' + page_url)            print('Queue'+ str(len(Spider.queue)) + '| crawled ' + str(len(Spider.crawled)))            Spider.add_links_to_queue(Spider.gather_link(page_url))            Spider.queue.remove(page_url)            Spider.crawled.add(page_url)            Spider.update_files()    @staticmethod    def gather_links(page_url):        html_string = ''        try:            response = urlopen(page_url)            if response.getheader('Content-Type') == 'text/html':                html_bytes = response.read()                html_String = html_bytes.decode("utf-8")            finder = LinkFinder(Spider.home_url, page_url)            finder.feed(html_string)        except:            print('Error: can not crawl page')            return set()        return finder.page_links()    @staticmethod    def add_links_to_queue(links):        for url in links:            if url in Spider.queue:                continue            if url in Spider.crawled:                continue            if Spider.domain_name not in url:                continue            Spider.queue.add(url)    @staticmethod    def update_files():        set_to_file(Spider.queue, Spider.queue_file)        set_to_file(Spider.crawled, Spider.crawled_file)